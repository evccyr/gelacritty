#!/usr/bin/env bash

## ANSI Colors (FG & BG)
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
DEFAULT_FG="$(printf '\033[39m')"  DEFAULT_BG="$(printf '\033[49m')" BOLD="$(tput bold)" NORMAL="$(tput sgr0)"

## Directories
ALACRITTY_DIR="$HOME/.config/alacritty"
LIGHT_DIR="/usr/local/share/gelacritty/colors/light"
DARK_DIR="/usr/local/share/gelacritty/colors/dark"
FONTS_DIR="/usr/local/share/fonts/gelacritty"

## Banner
banner () {
    clear
    echo "
    
    ${ORANGE}╭━━━┳━━━┳╮╱╱╭━━━╮
    ${ORANGE}┃╭━╮┃╭━━┫┃╱╱┃╭━╮┃
    ${ORANGE}┃┃╱╰┫╰━━┫┃╱╱┃┃╱┃┃
    ${ORANGE}┃┃╭━┫╭━━┫┃╱╭┫╰━╯┃
    ${ORANGE}┃╰┻━┃╰━━┫╰━╯┃╭━╮┃
    ${ORANGE}╰━━━┻━━━┻━━━┻╯╱╰╯
    ${ORANGE}☴ ${CYAN}T̼I̼L̼L̼ ̼I̼T̼'̼S̼ ̼G̼O̼N̼E̼ ${ORANGE}☴
    ${ORANGE}☴☴☴☴☴☴☴☴☴☴☴☴☴☴☴☴☴☴ 
    "
}

exit_on_signal_SIGINT () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script interrupted." 2>&1; echo; reset_color; }
    exit 0
}

exit_on_signal_SIGTERM () {
    { printf "\n\n%s\n" "    ${BLUE}[${RED}*${BLUE}] ${RED}Script terminated." 2>&1; echo; reset_color; }
    exit 0
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM

## Reset terminal colors
reset_color() {
	tput sgr0   # reset attributes
	tput op     # reset color
    return
}
 
## Available color-schemes & fonts
check_files () {
    if [[ "$1" = light ]]; then
        light=($(ls $LIGHT_DIR | egrep '\.yml$'))
        echo ${#light[@]}
    elif [[ "$1" = dark ]]; then
        dark=($(ls $DARK_DIR | egrep '\.yml$'))
        echo ${#dark[@]}
    elif [[ "$1" = fonts ]]; then
        fonts=($(ls $FONTS_DIR))
        echo ${#fonts[@]}
    fi
    return
}

total_light=$(check_files light)
total_dark=$(check_files dark)
total_fonts=$(check_files fonts)

## Apply color-schemes
apply_select () {
    { read -n 1 -p ${BLUE}"    [D]${RED}Dark ${CYAN}or ${BLUE}[L]${RED}Light${BLUE}? ${GREEN}"; echo; }

    if [[ "$REPLY" =~ ^[l/L/d/D/q/Q]$ ]]; then      #validate input
        if [[ "$REPLY" =~ ^[l/L]$ ]]; then
            select_light
            { reset_color; exit; }  
        elif [[ "$REPLY" =~ ^[d/D]$ ]]; then
            select_dark
            { reset_color; exit; }
        fi 
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        { sleep 1; banner; echo; apply_select; }
    fi
}
 
select_light () {
    if ! cd "$LIGHT_DIR"; then
        printf '\n%s\n' "    ${BOLD}${RED} ❌ ${NORMAL} ${BLUE}${LIGHT_DIR} doesn't exist${BLUE}";
        exit 1 
    fi 
    scheme=$( fzf ) 
    if ! cp --force "${LIGHT_DIR}/${scheme}" "${ALACRITTY_DIR}/gelacritty.yml" &>/dev/null; then
        printf '\n%s\n' "    ${BOLD}${RED} ❌ ${NORMAL} ${BLUE}Failed to apply theme${BLUE}";
        return 1
    fi
    printf '\n%s' "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Theme Set To: ${scheme##*/}"
	{ reset_color; exit; }
}
 
select_dark () {
    if ! cd "$DARK_DIR"; then
        printf '\n%s\n' "    ${BOLD}${RED} ❌ ${NORMAL} ${BLUE}${DARK_DIR} doesn't exist${BLUE}";
        exit 1 
    fi 
    scheme=$( fzf ) 
    if ! cp --force "${DARK_DIR}/${scheme}" "${ALACRITTY_DIR}/gelacritty.yml" &>/dev/null; then
        printf '\n%s\n' "    ${BOLD}${RED} ❌ ${NORMAL} ${BLUE}Failed to apply theme${BLUE}";
        return 1
    fi
    printf '\n%s' "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Theme Set To: ${scheme##*/}"
	{ reset_color; exit; }
}
 
random_light () {
    # Read user selection
    random_scheme=$(find $LIGHT_DIR -type f -name "*.yml" | shuf -n 1)
    echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Theme Set To: ${random_scheme##*/}"
	if ! cp --force "${random_scheme}" "${ALACRITTY_DIR}/gelacritty.yml" &>/dev/null; then
		printf '%s\n' "Failed to apply theme!" >&2
		return 1
	fi
    { reset_color; exit; }
}
 
random_dark () {
    # Read user selection
    random_scheme=$(find $DARK_DIR -type f -name "*.yml" | shuf -n 1)
    echo "    ${BLUE}[${RED}*${BLUE}] ${ORANGE}Theme Set To: ${random_scheme##*/}"
	if ! cp --force "${random_scheme}" "${ALACRITTY_DIR}/gelacritty.yml" &>/dev/null; then
		printf '%s\n' "Failed to apply theme!" >&2
		return 1
	fi
    { reset_color; exit; }
}
 
apply_font_family () {
    if ! grep -Ewq 'family:' "${ALACRITTY_DIR}/alacritty.yml"; then
        banner 
		printf '\n%s\n' "    ${BOLD}${RED} ! ${NORMAL} ${BLUE}Your config is broken..."
        sleep 1; 
        exit;
	fi
    if ! cd "$FONTS_DIR"; then
        printf '\n%s\n' "    ${BOLD}${RED} ❌ ${NORMAL} ${BLUE}${FONTS_DIR} doesn't exist${BLUE}";
        exit 1 
    fi 
    font_ttf=$( fzf )
    font_name=$(fc-list | grep -i $font_ttf | head -n 1 | cut -d':' -f2)
    printf '\n%s' "    ${BOLD}${RED} ♥ ${NORMAL} ${BLUE}Changing font to: $font_name"
    sed -ie "s/family:.*/family: $font_name/g" "$ALACRITTY_DIR/alacritty.yml"
    exit;
}
 
apply_font_size () {
    if ! grep -Ewq 'size:' "${ALACRITTY_DIR}/alacritty.yml"; then
        banner 
		printf '\n%s\n' "    ${BOLD}${RED} ! ${NORMAL} ${BLUE}Your config is broken..."
        sleep 1; 
        exit;
	fi
    printf "\n" 
    read -r -p "    ${BLACKBG}${BOLD}${WHITE} Enter Font Size (Default is 10) ${WHITEBG}${RED} ► ${NORMAL} " font_size;
    printf '\n%s' "    ${BOLD}${RED} ♥ ${NORMAL} ${BLUE}Setting size to: $font_size"
    sed -ie "s/size:.*/size: ${font_size:-10}/g" "$ALACRITTY_DIR/alacritty.yml"
    exit;
}

update_gela () {
    banner; 
    echo "    ${BLUE}[${RED}!${BLUE}] ${RED}UPDATING..."
    echo "    ${BLUE}"
	if [[ ! -d $HOME/gelacritty ]]; then
        git clone https://github.com/zim0369/gelacritty $HOME/gelacritty 
        cd $HOME/gelacritty 
    else
        echo; 
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Directory Exists..."
        cd $HOME/gelacritty
        git pull
	fi
    chmod +x * 
    sh install 
	{ reset_color; exit; }
}

## Main menu
interface() {
until [[ "$REPLY" =~ ^[q/Q]$ ]]; do
    banner
    echo "
    ${BLACKBG}${BOLD}${WHITE} D ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Dark Theme ($total_dark)
    ${WHITEBG}${BOLD}${BLACK} L ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Light Theme ($total_light)
    ${BLACKBG}${BOLD}${WHITE} F ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Fonts ($total_fonts)
    ${WHITEBG}${BOLD}${BLACK} S ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Font Size
    ${BLACKBG}${BOLD}${WHITE} J ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Random Dark
    ${WHITEBG}${BOLD}${BLACK} K ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Random Light
    ${BLACKBG}${BOLD}${WHITE} U ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Update
    ${WHITEBG}${BOLD}${BLACK} Q ${BLUE}${DEFAULT_BG}${NORMAL}${GREEN} Quit
    "

    { read -n 1 -p ${BLUE}"    [${RED}Select Option${BLUE}]: ${GREEN}"; echo; }
    { banner; echo;}

    if [[ "$REPLY" =~ ^[d/D/l/L/f/F/s/S/j/J/k/K/u/U/q/Q]$ ]]; then      #validate input
        if [[ "$REPLY" =~ ^[d/D]$ ]]; then
            select_dark
        elif [[ "$REPLY" =~ ^[l/L]$ ]]; then
            select_light
        elif [[ "$REPLY" =~ ^[f/F]$ ]]; then
            apply_font_family
        elif [[ "$REPLY" =~ ^[s/S]$ ]]; then
            apply_font_size
        elif [[ "$REPLY" =~ ^[j/j]$ ]]; then
            random_dark
        elif [[ "$REPLY" =~ ^[k/K]$ ]]; then
            random_light
        elif [[ "$REPLY" =~ ^[u/U]$ ]]; then
            update_gela
        fi
    else
        echo -n "    ${BLUE}[${RED}!${BLUE}] ${RED}Invalid Option, Try Again."
        sleep 2
    fi
done
{ echo "    ${BLUE}[${RED}*${BLUE}] ${RED}Bye Bye, Have A Nice Day!"; echo; reset_color; exit 0; }
} 

show_help() {
	cat << EOF
Randomly select & apply an alacritty color theme

USAGE: ${0##*/} [OPTIONS]

OPTIONS:
	-h, --help 		Show this help message
	-d, --dark 		Only select dark themes
	-l, --light 	Only select light themes
EOF
}

main() {
	local opts type theme
	opts="$(getopt --options hdl --longoptions help,dark,light --name "${0##*/}" -- "${@}")"
	
	eval set -- "${opts}"
	while true; do
		case "${1}" in
			-h | --help ) 	show_help; exit 0;;
			-d | --dark ) 	random_dark;;
			-l | --light ) 	random_light;;
			-- ) 			shift; break;;
			* ) 			break;;
		esac
		shift
	done
     
	if ! [ -s "${ALACRITTY_DIR}/alacritty.yml" ]; then
		echo "    ${BLUE}[${RED}*${BLUE}] ${RED}Cannot find alacritty configuration: '${ALACRITTY_DIR}/alacritty.yml'"${BLUE}
		printf '%s\n' "    ${BLUE}[${RED}*${BLUE}] ${RED}Creating one for you..."${BLUE}
        # sudo sed -i -e 's|program: .*|program: '$SHELL'|g' /usr/local/share/gelacritty/alacritty.yml
	    cp -r /usr/local/share/gelacritty/alacritty.yml $ALACRITTY_DIR
        { reset_color; exit; }
	fi
     
	if ! grep --quiet 'gelacritty\.yml' "${ALACRITTY_DIR}/alacritty.yml"; then
		printf '%s\n' "    ${BLUE}[${RED}*${BLUE}] ${RED}Adding gelacritty import to alacritty config..."
		printf 'import:\n- %s' "${ALACRITTY_DIR}/gelacritty.yml" >> "${ALACRITTY_DIR}/alacritty.yml"
        { reset_color; exit; }
	fi
	
    interface
	
	return 0
}

main "${@}"
